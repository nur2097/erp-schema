generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AddressType {
  INVOICE
  SHIPMENT
  DELIVERY
}

enum InvoiceType {
  PURCHASE
  SALES
  RETURN
  CANCEL
  OTHER
}

enum DocumentType {
  INVOICE
  ORDER
  WAYBILL
  OTHER
}

enum StockManagementType {
  INVENTORY_COUNT
  TRANSFER
  WAREHOUSE_TRANSFER
  PRODUCTION
  MISCELLANEOUS
  COST
  CONSIGNMENT
  EXHIBITION
  PURCHASE_INVOICE
  SALES_INVOICE
  QUICK_SALE
}

enum MovementDirection {
  IN
  OUT
}

enum CurrentMovementType {
  DEBIT
  CREDIT
}

enum CurrentMovementDocumentType {
  TRANSFER
  INVOICE
  RETURN_INVOICE
  CASH
  CUSTOMER_PROMISSORY_NOTE
  DEBT_PROMISSORY_NOTE
  CUSTOMER_CHECK
  DEBT_CHECK
  BOUNCED_CHECK
  MISCELLANEOUS
}

enum PaymentType {
  MULTIPLE_PAYMENT
  CASH
  POS
  BANK
  CHECK
  PROMISSORY_NOTE
  OTHER
}

enum StockUnit {
  PIECE
  KG
  LITER
  METER
  SQUARE_METER
  CUBIC_METER
  PACKAGE
  BOX
  CARTON
  TON
  USD
  EUR
  TRY
}

enum ProductType {
  SIMPLE_PRODUCT
  VARIABLE_PRODUCT
  DIGITAL_PRODUCT
  SERVICE
  VARIATION_PRODUCT
}

enum InstitutionType {
  COMPANY
  INDIVIDUAL
}

enum CurrentType {
  BUYER_SELLER
  BUYER
  SELLER
  EMPLOYEE
  MARKETPLACE
  INSTITUTION
  PARENT_COMPANY
  IMPORT
  EXPORT
  IMPORT_EXPORT
  CUSTOMER
  SUPPLIER
  OTHER
}

enum VaultDirection {
  IN
  OUT
  TRANSFER_RECEIVED
}

enum VaultType {
  DEBT_TRANSFER
  SERVICE_CHARGE_COLLECTION
  COMPANY_CREDIT_CARD_WITHDRAWAL
  FOREIGN_CURRENCY_PURCHASE
  BANK_WITHDRAWAL
  VALUABLE_ASSET_RECEIPT
  RECEIVABLE_TRANSFER
  SERVICE_CHARGE_PAYMENT
  COMPANY_CREDIT_CARD_DEPOSIT
  CURRENCY_EXCHANGE
  LOAN_PAYMENT
  BANK_PAYMENT
  PRECIOUS_METAL_EXCHANGE
  LOAN_WITHDRAWAL
  TRANSFER_RECEIVED
  TRANSFER_OUTGOING
  TRANSFER_INCOMING
  POS_WITHDRAWAL
  PURCHASE_INVOICE_PAYMENT
  SALES_INVOICE_PAYMENT
  CASH_COLLECTION
  BANK_COLLECTION
  POS_COLLECTION
}

enum VaultDocumentType {
  GENERAL
  ACCOUNTING
  OFFICIAL
}

enum StockTakeStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StockTakeType {
  FULL
  PARTIAL
  SPOT
  PERIODIC
}

enum OrderStatus {
  // Generic order statuses for all platforms
  PENDING
  CONFIRMED
  AWAITING
  CREATED
  PICKING
  INVOICED
  PROCESSING
  SHIPPED
  DELIVERED
  UNDELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  REPACK
  UNPACKED
  UNSUPPLIED
  AT_COLLECTION_POINT
}

enum PlatformType {
  TRENDYOL
  HEPSIBURADA
  SHOPIFY
  OTHER
}

model StockCard {
  id                      String                    @id @default(cuid())
  organizationId          String                    @map("organization_id")
  productCode             String                    @db.VarChar(100)
  productName             String                    @db.VarChar(150)
  unit                    StockUnit                 @default(PIECE)
  shortDescription        String?                   @db.VarChar(150)
  description             String?                   @db.Text
  // companyCode removed - using organizationId instead
  branchCode              String?                   @db.VarChar(50)
  modelCode               String?                   @db.VarChar(50)
  brandId                 String?                   @db.VarChar(100)
  productType             ProductType               @default(SIMPLE_PRODUCT)
  kdv                     Decimal?                  @db.Decimal(15, 4)
  gtip                    String?                   @db.VarChar(50)
  pluCode                 String?                   @db.VarChar(50)
  desi                    Decimal?                  @db.Decimal(15, 4)
  unitDivisor             Decimal?                  @db.Decimal(15, 4)
  orderNumber             String?                   @db.VarChar(50)
  shelf                   String?                   @db.VarChar(50)
  profitMargin            Decimal?                  @db.Decimal(15, 4)
  criticalStockLevel      Decimal?                  @db.Decimal(15, 4)
  costPrice               Decimal?                  @db.Decimal(15, 4)
  costCurrency            String?                   @db.VarChar(3)
  stockStatus             Boolean                   @default(true)
  hasExpirationDate       Boolean                   @default(false)
  allowNegativeStock      Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String?
  updatedBy               String?
  invoiceItems            InvoiceItem[]
  branch                  OrganizationBranch?       @relation(fields: [branchCode], references: [branchCode])
  brand                   Brand?                    @relation(fields: [brandId], references: [id])
  stockCardAttributeItems StockCardAttributeItems[]
  barcodes                StockCardBarcode[]
  stockCardCategoryItem   StockCardCategoryItem[]
  stockCardElectronicInvoice        StockCardElectronicInvoice?
  stockCardManufacturer   StockCardManufacturer[]
  stockCardMarketNames    StockCardMarketNames[]
  stockCardPriceLists     StockCardPriceListItems[]
  taxRates                StockCardTaxRate[]
  stockCardWarehouse      StockCardWarehouse[]
  stockMovement           StockMovement[]
  stores                  MerchantStore[]           @relation("StockCardToStore")
  ProductMatch            ProductMatch[]
  StockTakeDetail         StockTakeDetail[]

  PrintQueue PrintQueue[]

  @@unique([organizationId, productCode], map: "uniq_stock_card_product_code_per_org")
  @@unique([productCode])
  @@index([organizationId])
  @@index([organizationId, productName])
  @@index([organizationId, brandId])
  @@index([organizationId, stockStatus])
  @@index([organizationId, criticalStockLevel])
  @@index([organizationId, createdAt])
  @@index([organizationId, stockStatus, criticalStockLevel])
  @@index([organizationId, brandId, stockStatus])
}

model StockCardElectronicInvoice {
  id          String    @id @default(cuid())
  organizationId String @map("organization_id")
  productCode String    @unique @db.VarChar(100)
  productName String    @db.VarChar(150)
  stockCardId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])

  @@index([organizationId])
  @@index([stockCardId])
}

model StockCardManufacturer {
  id          String    @id @default(cuid())
  organizationId String @map("organization_id")
  productCode String    @db.VarChar(100)
  productName String    @db.VarChar(150)
  barcode     String    @unique @db.VarChar(100)
  brandId     String?   @db.VarChar(100)
  stockCardId String
  currentId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brand       Brand?    @relation(fields: [brandId], references: [id])
  current             Current           @relation(fields: [currentId], references: [id])
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])
}

model Brand {
  id                    String                  @id @default(cuid())
  organizationId        String                  @map("organization_id")
  brandName             String                  @db.VarChar(100)
  brandCode             String                  @db.VarChar(50)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  // User relations removed - will be handled by userId references to core-persistence
  stockCard             StockCard[]
  stockCardManufacturer StockCardManufacturer[]

  @@unique([organizationId, brandName], map: "uniq_brand_name_per_org")
  @@unique([organizationId, brandCode], map: "uniq_brand_code_per_org")
  @@index([organizationId])
}

model StockCardPriceList {
  id                      String                    @id @default(cuid())
  organizationId          String                    @map("organization_id")
  priceListName           String                    @db.VarChar(100)
  currency                String                    @db.VarChar(3)
  isVatIncluded           Boolean                   @default(true)
  isActive                Boolean                   @default(true)
  current                 Current[]
  currentMovement         CurrentMovement[]
  invoices                Invoice[]
  stockCardPriceListItems StockCardPriceListItems[]
  stockMovement           StockMovement[]

  stores MerchantStore[]

  @@unique([organizationId, priceListName], map: "uniq_price_list_name_per_org")
  @@index([organizationId])
  @@index([organizationId, isActive])
}

model StockCardPriceListItems {
  id                 String               @id @default(cuid())
  organizationId     String               @map("organization_id")
  priceListId        String
  stockCardId        String
  price              Decimal              @db.Decimal(15, 4)
  barcode            String?              @db.VarChar(100)
  vatRate            Decimal?             @db.Decimal(15, 4)
  priceList          StockCardPriceList   @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)

  @@unique([organizationId, priceListId, stockCardId], map: "uniq_stock_price_list_item_per_org")
  @@index([organizationId])
  @@index([organizationId, priceListId])
}

model StockCardBarcode {
  id                 String               @id @default(cuid())
  organizationId     String               @map("organization_id")
  stockCardId        String
  barcode            String               @db.VarChar(100)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)

  @@unique([organizationId, barcode], map: "uniq_stock_barcode_per_org")
  @@index([organizationId])
  @@index([organizationId, stockCardId])
}

model StockCardMarketNames {
  id          String    @id @default(cuid())
  organizationId String @map("organization_id")
  stockCardId String
  marketName  String    @db.VarChar(100)
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])
}

model StockCardCategory {
  id               String                  @id @default(cuid())
  organizationId   String                  @map("organization_id")
  categoryName     String                  @db.VarChar(100)
  categoryCode     String                  @db.VarChar(100)
  parentCategoryId String?
  parentCategory   StockCardCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  StockCardCategory[]     @relation("CategoryHierarchy")
  categoryItems    StockCardCategoryItem[]

  @@unique([organizationId, categoryName], map: "uniq_stock_category_name_per_org")
  @@unique([organizationId, categoryCode], map: "uniq_stock_category_code_per_org")
  @@index([organizationId])
  @@index([organizationId, parentCategoryId])
}

model StockCardCategoryItem {
  id                String            @id @default(cuid())
  organizationId    String            @map("organization_id")
  stockCardId       String
  categoryId        String
  stockCardCategory StockCardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockCard         StockCard         @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardTaxRate {
  id          String     @id @default(cuid())
  organizationId String @map("organization_id")
  stockCardId String?
  taxName     String     @db.VarChar(100)
  taxRate     Decimal    @db.Decimal(15, 4)
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardAttribute {
  id                      String                    @id @default(cuid())
  organizationId          String                    @map("organization_id")
  attributeName           String                    @db.VarChar(100)
  value                   String
  stockCardAttributeItems StockCardAttributeItems[]
}

model StockCardAttributeItems {
  id          String             @id @default(cuid())
  organizationId String          @map("organization_id")
  attributeId String
  stockCardId String
  attribute   StockCardAttribute @relation(fields: [attributeId], references: [id])
  stockCard   StockCard          @relation(fields: [stockCardId], references: [id])
}

model StockMovement {
  id               String              @id @default(cuid())
  organizationId   String              @map("organization_id")
  productCode      String
  warehouseCode    String
  branchCode       String
  currentCode      String?
  documentType     DocumentType?
  invoiceType      InvoiceType?
  movementType     StockManagementType
  documentNo       String?
  type             String?
  description      String?
  quantity         Decimal?            @db.Decimal(15, 4)
  unitPrice        Decimal?            @db.Decimal(15, 4)
  totalPrice       Decimal?            @db.Decimal(15, 4)
  unitOfMeasure    String?             @db.VarChar(50)
  outWarehouseCode String?
  priceListId      String?
  createdAt        DateTime            @default(now())
  createdBy        String?
  updatedAt        DateTime?           @updatedAt
  updatedBy        String?
  direction        MovementDirection?
  branch           OrganizationBranch  @relation(fields: [branchCode], references: [branchCode])
  current          Current?            @relation(fields: [currentCode], references: [currentCode])
  invoice          Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
  outWarehouse     OrganizationWarehouse? @relation("StockMovementOutWarehouse", fields: [outWarehouseCode], references: [warehouseCode])
  priceList        StockCardPriceList? @relation(fields: [priceListId], references: [id])
  stockCard        StockCard           @relation(fields: [productCode], references: [productCode])
  warehouse        OrganizationWarehouse @relation("StockMovementWarehouse", fields: [warehouseCode], references: [warehouseCode])

  // Performance indexes for Stock Movement Reports with organizationId
  @@index([organizationId])
  @@index([organizationId, productCode])
  @@index([organizationId, warehouseCode])
  @@index([organizationId, createdAt])
  @@index([organizationId, direction])
  @@index([organizationId, movementType])
  @@index([organizationId, productCode, createdAt])
  @@index([organizationId, warehouseCode, createdAt])
  @@index([organizationId, productCode, direction])
  @@index([organizationId, createdAt, direction])
  // Legacy indexes removed - using organizationId-scoped indexes only
}

model OrganizationBranch {
  id              String            @id @default(cuid())
  organizationId  String            @map("organization_id")
  branchName      String            @db.VarChar(100)
  branchCode      String            @db.VarChar(50)
  address         String            @db.VarChar(250)
  countryCode     String            @db.VarChar(3)
  city            String            @db.VarChar(50)
  district        String            @db.VarChar(50)
  phone           String            @db.VarChar(50)
  email           String            @db.VarChar(100)
  website         String            @db.VarChar(100)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       String?
  updatedBy       String?
  bankAccounts    Bank[]
  warehouse       BranchWarehouse[]
  currentBranch   CurrentBranch[]
  currentMovement CurrentMovement[]
  outInvoices     Invoice[]         @relation("InvoiceBranch")
  invoices        Invoice[]         @relation("InvoiceOutBranch")
  paymentTerminals Pos[]
  stockCard       StockCard[]
  stockMovement   StockMovement[]
  cashVaults      Vault[]
  StockTake       StockTake[]

  @@unique([organizationId, branchName], map: "uniq_branch_name_per_org")
  @@unique([organizationId, branchCode], map: "uniq_branch_code_per_org")
  @@unique([branchCode])
  @@index([organizationId])
}

model OrganizationWarehouse {
  id                    String                  @id @default(cuid())
  organizationId        String                  @map("organization_id")
  warehouseName         String                  @db.VarChar(100)
  warehouseCode         String                  @db.VarChar(50)
  address               String                  @db.VarChar(250)
  countryCode           String                  @db.VarChar(3)
  city                  String                  @db.VarChar(50)
  district              String                  @db.VarChar(50)
  phone                 String                  @db.VarChar(50)
  email                 String                  @db.VarChar(100)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  branch                BranchWarehouse[]
  invoices              Invoice[]
  stockCardWarehouse    StockCardWarehouse[]
  outMovements          StockMovement[]         @relation("StockMovementOutWarehouse")
  stockMovements        StockMovement[]         @relation("StockMovementWarehouse")
  stockAudits           StockTake[]

  stores MerchantStore[]

  @@unique([organizationId, warehouseName], map: "uniq_warehouse_name_per_org")
  @@unique([organizationId, warehouseCode], map: "uniq_warehouse_code_per_org")
  @@unique([warehouseCode])
  @@index([organizationId])
}

model BranchWarehouse {
  id          String    @id @default(cuid())
  organizationId String @map("organization_id")
  branchId    String
  warehouseId String
  branch      OrganizationBranch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  warehouse   OrganizationWarehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([organizationId, branchId, warehouseId], map: "uniq_branch_warehouse_per_org")
  @@index([organizationId])
}

model StockCardWarehouse {
  id          String    @id @default(cuid())
  organizationId String @map("organization_id")
  stockCardId String
  warehouseId String
  quantity    Decimal   @db.Decimal(15, 4)
  stockCard   StockCard @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  warehouse   OrganizationWarehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([organizationId, stockCardId, warehouseId], map: "uniq_stock_warehouse_per_org")
  @@index([organizationId])
  @@index([organizationId, stockCardId])
  @@index([organizationId, warehouseId])
  @@index([organizationId, quantity])
}

model StockTake {
  id            String          @id @default(cuid())
  organizationId String         @map("organization_id")
  documentNo    String          @db.VarChar(50)
  warehouseId   String
  branchCode    String
  stockTakeType StockTakeType   @default(FULL)
  status        StockTakeStatus @default(DRAFT)
  description   String?
  reference     String?         @db.VarChar(100)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String?
  updatedBy     String?

  warehouse     OrganizationWarehouse         @relation(fields: [warehouseId], references: [id])
  branch        OrganizationBranch            @relation(fields: [branchCode], references: [branchCode])
  details       StockTakeDetail[]

  @@unique([organizationId, documentNo], map: "uniq_stock_take_doc_per_org")
  @@unique([documentNo])
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, warehouseId])
}

model StockTakeDetail {
  id          String  @id @default(cuid())
  organizationId String @map("organization_id")
  stockTakeId String
  stockCardId String
  quantity    Decimal @db.Decimal(15, 4)
  difference  Decimal @db.Decimal(15, 4)
  note        String?

  stockTake StockTake @relation(fields: [stockTakeId], references: [id])
  stockCard StockCard @relation(fields: [stockCardId], references: [id])
}

model Current {
  id                    String                  @id @default(cuid())
  organizationId        String                  @map("organization_id")
  currentCode           String                  @db.VarChar(50)
  currentName           String                  @db.VarChar(100)
  currentType           CurrentType             @default(BUYER_SELLER)
  institution           InstitutionType         @default(INDIVIDUAL)
  identityNo            String?                 @db.VarChar(50)
  taxNumber             String?                 @db.VarChar(50)
  taxOffice             String?                 @db.VarChar(50)
  title                 String?                 @db.VarChar(100)
  name                  String?                 @db.VarChar(50)
  surname               String?                 @db.VarChar(50)
  webSite               String?                 @db.VarChar(100)
  birthDate             DateTime?
  registeredEmailAddress String?               @db.VarChar(50)
  mersisNumber          String?                 @db.VarChar(50)
  registryNumber        String?                 @db.VarChar(50)
  priceListId           String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  priceList             StockCardPriceList      @relation(fields: [priceListId], references: [id])
  currentAddress        CurrentAddress[]
  currentBranch         CurrentBranch[]
  currentCategoryItem   CurrentCategoryItem[]
  currentFinancial      CurrentFinancial[]
  currentMovement       CurrentMovement[]
  currentOfficials      CurrentOfficials[]
  currentRisk           CurrentRisk?
  invoices              Invoice[]
  stockCardManufacturer StockCardManufacturer[]
  stockMovement         StockMovement[]

  // OrderPrepareWarehouse relation removed - functionality deprecated

  @@unique([organizationId, currentCode], map: "uniq_current_code_per_org")
  @@unique([currentCode])
  @@index([organizationId])
  @@index([organizationId, currentType])
  @@index([organizationId, priceListId])
}

model CurrentBranch {
  id          String   @id @default(cuid())
  organizationId String @map("organization_id")
  currentCode String   @db.VarChar(50)
  branchCode  String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branch      OrganizationBranch   @relation(fields: [branchCode], references: [branchCode])
  current     Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentAddress {
  id          String      @id @default(cuid())
  organizationId String   @map("organization_id")
  currentCode String      @db.VarChar(50)
  addressName String      @db.VarChar(50)
  addressType AddressType @default(INVOICE)
  address     String      @db.VarChar(250)
  countryCode String      @db.VarChar(3)
  city        String      @db.VarChar(50)
  district    String      @db.VarChar(50)
  postalCode  String      @db.VarChar(10)
  phone       String      @db.VarChar(50)
  phone2      String      @db.VarChar(50)
  email       String      @db.VarChar(100)
  email2      String      @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  current     Current     @relation(fields: [currentCode], references: [currentCode])
}

model CurrentFinancial {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  currentCode    String   @db.VarChar(50)
  bankName       String   @db.VarChar(50)
  bankBranch     String   @db.VarChar(50)
  bankBranchCode String   @db.VarChar(50)
  iban           String   @db.VarChar(100)
  accountNo      Decimal? @db.Decimal(15, 4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  current                Current          @relation(fields: [currentCode], references: [currentCode])
}

model CurrentRisk {
  id                       String   @id @default(cuid())
  organizationId           String   @map("organization_id")
  currentCode              String   @unique @db.VarChar(50)
  currency                 String   @db.VarChar(3)
  collateralLocalAmount    Decimal? @db.Decimal(15, 4)
  openAccountLocalLimit    Decimal? @db.Decimal(15, 4)
  accountCutoffDay         Int?
  paymentTermDays          Int?
  delayLimitDays           Int?
  defaultPurchaseDiscount  Decimal? @db.Decimal(15, 4)
  defaultSalesDiscount     Decimal? @db.Decimal(15, 4)
  sendStatement            Boolean? @default(false)
  limitControl             Boolean? @default(false)
  openAccount              Boolean? @default(false)
  posUsage                 Boolean? @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  current                  Current          @relation(fields: [currentCode], references: [currentCode])
}

model CurrentOfficials {
  id          String   @id @default(cuid())
  organizationId String @map("organization_id")
  currentCode String   @db.VarChar(50)
  title       String   @db.VarChar(100)
  name        String   @db.VarChar(50)
  surname     String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  note        String   @db.VarChar(250)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  current     Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentMovement {
  id                 String                       @id @default(cuid())
  organizationId     String                       @map("organization_id")
  currentCode        String?                      @db.VarChar(50)
  dueDate            DateTime?
  description        String?                      @db.VarChar(250)
  debtAmount         Decimal?                     @db.Decimal(15, 4)
  creditAmount       Decimal?                     @db.Decimal(15, 4)
  priceListId        String?
  movementType       CurrentMovementType
  documentType       CurrentMovementDocumentType?
  documentNo         String?
  branchCode         String
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  createdBy          String?
  updatedBy          String?
  paymentType        PaymentType?

  branch             OrganizationBranch           @relation(fields: [branchCode], references: [branchCode])
  current            Current?                     @relation(fields: [currentCode], references: [currentCode])
  invoice            Invoice?                     @relation(fields: [documentNo], references: [invoiceNo])
  stockCardPriceList StockCardPriceList?          @relation(fields: [priceListId], references: [id])
  
  VaultMovement         VaultMovement[]
  BankMovement          BankMovement[]
  PosMovement           PosMovement[]
}

model CurrentCategory {
  id               String                @id @default(cuid())
  organizationId   String                @map("organization_id")
  categoryName     String                @db.VarChar(100)
  categoryCode     String                @db.VarChar(100)
  parentCategoryId String?
  parentCategory   CurrentCategory?              @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  CurrentCategory[]             @relation("CategoryHierarchy")
  categoryItems    CurrentCategoryItem[]

  @@unique([organizationId, categoryCode], map: "uniq_current_category_code_per_org")
  @@index([organizationId])
  @@index([organizationId, parentCategoryId])
}

model CurrentCategoryItem {
  id          String          @id @default(cuid())
  organizationId String       @map("organization_id")
  currentCode String          @db.VarChar(50)
  categoryId  String
  category    CurrentCategory         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  current             Current                 @relation(fields: [currentCode], references: [currentCode], onDelete: Cascade)
}

model Invoice {
  id                String              @id @default(cuid())
  organizationId    String              @map("organization_id")
  invoiceNo         String              @db.VarChar(50)
  orderId           String?
  gibInvoiceNo      String?
  invoiceDate       DateTime?
  invoiceType       InvoiceType?
  documentType      DocumentType?
  currentCode       String?
  branchCode        String
  outBranchCode     String?
  warehouseCode     String
  description       String?
  generalDiscountAmount Decimal?        @db.Decimal(15, 4)
  generalDiscountRate Decimal?          @db.Decimal(15, 4)
  paymentDate       DateTime?
  paymentDay        Int?
  priceListId       String?
  totalAmount       Decimal?            @db.Decimal(15, 4)
  totalVat          Decimal?            @db.Decimal(15, 4)
  totalDiscount     Decimal?            @db.Decimal(15, 4)
  totalNet          Decimal?            @db.Decimal(15, 4)
  totalPaid         Decimal?            @db.Decimal(15, 4)
  totalDebt         Decimal?            @db.Decimal(15, 4)
  totalBalance      Decimal?            @db.Decimal(15, 4)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  canceledAt        DateTime?
  createdBy         String?
  updatedBy         String?

  order             MarketplaceOrder?   @relation(fields: [orderId], references: [id])
  branch            OrganizationBranch  @relation("InvoiceBranch", fields: [branchCode], references: [branchCode])
  current           Current?            @relation(fields: [currentCode], references: [currentCode])
  outBranch         OrganizationBranch? @relation("InvoiceOutBranch", fields: [outBranchCode], references: [branchCode])
  priceList         StockCardPriceList? @relation(fields: [priceListId], references: [id])
  warehouse         OrganizationWarehouse           @relation(fields: [warehouseCode], references: [warehouseCode])
  
  bankMovements     BankMovement[]
  partnerMovements  CurrentMovement[]
  invoiceItems      InvoiceItem[]
  terminalMovements PosMovement[]
  stockMovement     StockMovement[]
  vaultMovements    VaultMovement[]

  @@unique([organizationId, invoiceNo], map: "uniq_invoice_no_per_org")
  @@unique([invoiceNo])
  @@index([organizationId])
  @@index([organizationId, invoiceType])
  @@index([organizationId, invoiceDate])
  @@index([organizationId, currentCode])
}

model InvoiceItem {
  id          String     @id @default(cuid())
  organizationId String  @map("organization_id")
  invoiceId   String
  productCode String?
  costCode    String?
  costName    String?
  currency    String?
  quantity    Decimal?   @db.Decimal(15, 4)
  unitPrice   Decimal?   @db.Decimal(15, 4)
  totalPrice  Decimal?   @db.Decimal(15, 4)
  vatRate     Decimal?   @db.Decimal(15, 4)
  discount    Decimal?   @db.Decimal(15, 4)
  netPrice    Decimal?   @db.Decimal(15, 4)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  invoice          Invoice         @relation(fields: [invoiceId], references: [id])
  stockCard   StockCard? @relation(fields: [productCode], references: [productCode])
}

model Vault {
  id            String          @id @default(cuid())
  organizationId String         @map("organization_id")
  vaultName     String          @db.VarChar(50)
  branchCode    String
  balance       Decimal         @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        OrganizationBranch          @relation(fields: [branchCode], references: [branchCode])
  vaultMovements VaultMovement[]
}

model VaultMovement {
  id                String            @id @default(cuid())
  organizationId    String            @map("organization_id")
  vaultId           String
  invoiceId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  vaultDirection    VaultDirection
  vaultType         VaultType
  vaultDocumentType VaultDocumentType
  createdBy         String?
  updatedBy         String?
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  vault             Vault             @relation(fields: [vaultId], references: [id])

  currentMovementId String?
  partnerMovement   CurrentMovement? @relation(fields: [currentMovementId], references: [id])
}

model Bank {
  id            String         @id @default(cuid())
  organizationId String        @map("organization_id")
  bankName      String         @db.VarChar(50)
  branchCode    String
  balance       Decimal        @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        OrganizationBranch         @relation(fields: [branchCode], references: [branchCode])
  accountMovements BankMovement[]
}

model BankMovement {
  id                String            @id @default(cuid())
  organizationId    String            @map("organization_id")
  bankId            String
  invoiceId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  bankDirection     VaultDirection
  bankType          VaultType
  bankDocumentType  VaultDocumentType
  currentMovementId String?
  createdBy         String?
  updatedBy         String?
  bank              Bank              @relation(fields: [bankId], references: [id])
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  currentMovement   CurrentMovement?          @relation(fields: [currentMovementId], references: [id])
}

model Pos {
  id            String        @id @default(cuid())
  organizationId String       @map("organization_id")
  posName       String        @db.VarChar(50)
  branchCode    String
  balance       Decimal       @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        OrganizationBranch        @relation(fields: [branchCode], references: [branchCode])
  terminalMovements PosMovement[]
}

model PosMovement {
  id                String            @id @default(cuid())
  organizationId    String            @map("organization_id")
  posId             String
  invoiceId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  posDirection      VaultDirection
  posType           VaultType
  posDocumentType   VaultDocumentType
  currentMovementId String?
  createdBy         String?
  updatedBy         String?
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  pos               Pos               @relation(fields: [posId], references: [id])
  currentMovement   CurrentMovement?          @relation(fields: [currentMovementId], references: [id])
}

model MarketplaceOrder {
  id                         String                       @id @default(cuid())
  organizationId             String                       @map("organization_id")
  platformOrderId            String
  platform                   String // "TRENDYOL", "HEPSIBURADA", "SHOPIFY"
  customerId                 String
  status                     OrderStatus         @default(PENDING) // Migrated from TrendyolOrderStatus
  currency                   String @default("TRY")
  orderDate                  DateTime
  totalPrice                 Decimal @db.Decimal(18, 2) // Changed from Float to Decimal for precision
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  // Core address fields
  billingAddressId           String?
  shippingAddressId          String?

  // Basic order info
  storeId                    String
  isInvoiceCreated           Boolean                      @default(false)

  // Additional order fields (that were missing)
  deliveryType               String?
  deliveryAddressType        String? // "Shipment" veya "CollectionPoint"
  cargoCompany               String?
  timeSlot                   DateTime?

  // Trendyol specific fields (kept for backward compatibility)
  fastDelivery               Boolean?                     @default(false)
  fastDeliveryType           String? // "TodayDelivery", "SameDayShipping", "FastDelivery"
  is3pByTrendyol             Boolean?                     @default(false)
  isMicro                    Boolean?                     @default(false)
  microRegion                String?
  estimatedDeliveryStart     DateTime?
  estimatedDeliveryEnd       DateTime?
  agreedDeliveryDate         DateTime? // Product delivery deadline calculated from specified term
  extendedDeliveryDate       DateTime? // Ek süre sonrası yeni tarih
  isCommercial               Boolean?                     @default(false) // Corporate invoice information
  giftBoxRequested           Boolean?                     @default(false) // Hediye paketi talebi
  etgbNo                     String? // Mikro ihracat için ETGB numarası
  etgbDate                   DateTime? // Mikro ihracat için ETGB tarihi
  containsDangerousProduct   Boolean?                     @default(false) // Dangerous product information
  deliveredByService         Boolean?                     @default(false) // Yetkili servis ile gönderim
  originShipmentDate         DateTime? // Siparişin satıcıya aktarılma tarihi
  lastModifiedDate           DateTime? // Sipariş paket statüsünün son güncellenme tarihi

  // Platform specific data stored as JSON for future flexibility
  platformData               Json? // Additional platform-specific fields (Hepsiburada, Shopify specific data)
  billingAddress             MarketplaceOrderAddress?     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress            MarketplaceOrderAddress?     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  store                      MerchantStore                @relation(fields: [storeId], references: [id])
  cargos                     MarketplaceOrderCargo[]
  items                      MarketplaceOrderItem[]
  addresses                  MarketplaceOrderAddress[]
  statusHistory              MarketplaceOrderStatusHistory[]
  invoices                   Invoice[]

  @@unique([organizationId, platformOrderId, platform], map: "uniq_order_platform_id_per_org")
  @@index([organizationId])
  @@index([organizationId, platform])
  @@index([organizationId, status])
  @@index([organizationId, orderDate])
  @@index([organizationId, platform, status])
  @@index([organizationId, storeId])
}

model MarketplaceOrderAddress {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  orderId        String
  address        String
  city           String
  district       String
  postalCode     String
  country        String
  fullName       String
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  paymentMethod  String?
  transactionId  String?
  company        String? // Corporate billing information
  taxNumber      String? // Vergi numarası
  taxOffice      String? // Vergi dairesi
  latitude       String? // Konum bilgisi
  longitude      String? // Konum bilgisi
  neighborhood   String? // Mahalle bilgisi
  phone          String? // Telefon bilgisi
  billingOrders  MarketplaceOrder[]  @relation("BillingAddress")
  shippingOrders MarketplaceOrder[]  @relation("ShippingAddress")
  order          MarketplaceOrder    @relation(fields: [orderId], references: [id])
}

model MarketplaceOrderCargo {
  id             String    @id @default(uuid())
  organizationId String    @map("organization_id")
  name           String
  shortName      String
  trackingNumber String
  orderId        String
  deliveredAt    DateTime?
  deliveryNote   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          MarketplaceOrder     @relation(fields: [orderId], references: [id])
}

model MarketplaceOrderItem {
  id                      String   @id @default(cuid())
  organizationId          String   @map("organization_id")
  orderId                 String
  quantity                Int
  unitPrice               Decimal  @db.Decimal(15, 4)
  totalPrice              Decimal  @db.Decimal(15, 4)
  productName             String
  productCode             String
  barcode                 String?
  merchantSku             String?
  productSize             String?
  productColor            String?
  productOrigin           String?
  salesCampaignId         String?
  merchantId              String?
  amount                  Decimal? @db.Decimal(15, 2)
  discount                Decimal? @db.Decimal(15, 2)
  tyDiscount              Decimal? @db.Decimal(15, 2)
  vatBaseAmount           Decimal? @db.Decimal(15, 2)
  currencyCode            String?
  sku                     String?
  orderLineId             String?
  orderLineItemStatusName String?

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  order               MarketplaceOrder     @relation(fields: [orderId], references: [id])
  marketplaceProduct  MarketplaceProduct?  @relation(fields: [barcode], references: [barcode])
  discountDetails     MarketplaceOrderItemDiscount[]
}

model MarketplaceOrderItemDiscount {
  id                 String   @id @default(cuid())
  organizationId     String   @map("organization_id")
  orderItemId        String
  lineItemPrice      Decimal  @db.Decimal(15, 2)
  lineItemDiscount   Decimal  @db.Decimal(15, 2)
  lineItemTyDiscount Decimal  @db.Decimal(15, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  orderItem MarketplaceOrderItem @relation(fields: [orderItemId], references: [id])
}

model MarketplaceOrderStatusHistory {
  id             String      @id @default(cuid())
  organizationId String      @map("organization_id")
  orderId        String
  previousStatus OrderStatus
  newStatus      OrderStatus
  note           String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  order          MarketplaceOrder       @relation(fields: [orderId], references: [id])

  @@index([organizationId, orderId])
  @@map("order_status_histories")
}

model MarketplaceWebhookLog {
  id             String              @id @default(cuid())
  organizationId String              @map("organization_id")
  platform       PlatformType
  storeId        String
  eventType      String
  status         String              @default("PENDING") // PENDING, PROCESSED, FAILED
  payload        Json                // JSON data (changed from String to Json for better type safety)
  orderNumber    String?
  errorMessage   String?
  processedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  store MerchantStore @relation(fields: [storeId], references: [id])

  @@index([organizationId, platform])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
}

// Legacy TrendyolWebhookLog removed - use MarketplaceWebhookLog instead

model MarketplacePlatform {
  id                    String                  @id @default(cuid())
  organizationId        String                  @map("organization_id")
  name                  String
  platform              PlatformType            @default(OTHER)
  apiBaseUrl            String
  logoUrl               String?
  // companyCode removed - using organizationId instead
  createdBy             String?
  updatedBy             String?
  attributes            MarketplaceAttribute[]
  stores                MerchantStore[]

  @@unique([organizationId, name], map: "uniq_marketplace_name_per_org")
  @@index([organizationId])
  @@index([organizationId, platform])
}

model MerchantStore {
  id                  String                @id @default(cuid())
  organizationId      String                @map("organization_id")
  name                String
  warehouseCode       String?
  marketPlaceId       String
  apiCredentials      String
  autoInvoiceCreation Boolean               @default(false)
  storeUrl            String?
  createdBy           String?
  updatedBy           String?
  products            MarketplaceProduct[]
  priceListId         String?
  priceList           StockCardPriceList?   @relation(fields: [priceListId], references: [id])
  orders              MarketplaceOrder[]
  platform            MarketplacePlatform   @relation(fields: [marketPlaceId], references: [id])
  stockcard           StockCard[]           @relation("StockCardToStore")
  warehouse           OrganizationWarehouse? @relation(fields: [warehouseCode], references: [warehouseCode])

  // Webhook logs
  marketplaceWebhookLogs MarketplaceWebhookLog[]
}

model MarketplaceCategory {
  id                          String                @id @default(cuid())
  organizationId              String                @map("organization_id")
  categoryName                String?
  marketPlaceCategoryId       String?
  marketPlaceCategoryParentId String?
  products                    MarketplaceProduct[]  @relation("ProductsOnCategories")

  // Parent and child category relationships
  subCategories  MarketplaceCategory[]   @relation("CategoryParent")
  parentCategory MarketplaceCategory?    @relation("CategoryParent", fields: [marketPlaceCategoryParentId], references: [id])
}

model MarketplaceBrand {
  id                  String                @id @default(cuid())
  organizationId      String                @map("organization_id")
  marketPlaceBrandId  String?
  brandName           String?
  products            MarketplaceProduct[]
}

model MarketplaceAttribute {
  id                      String                @id @default(cuid())
  organizationId          String                @map("organization_id")
  marketPlaceId           String?
  MarketPlaceCategoriesId String?
  attributeName           String?
  attributeMarketPlaceId  String?
  valueName               String?
  valueMarketPlaceId      String?
  required                Boolean?
  allowCustom             Boolean?
  platform                MarketplacePlatform?  @relation(fields: [marketPlaceId], references: [id], onDelete: Cascade)
  products                MarketplaceProduct[]  @relation("MarketplaceAttributesToMarketplaceProducts")
}

model MarketplaceProductImage {
  id                   String               @id @default(cuid())
  organizationId       String               @map("organization_id")
  imageUrl             String?
  marketPlaceProductId String?
  product              MarketplaceProduct?  @relation(fields: [marketPlaceProductId], references: [id], onDelete: Cascade)
}

model MarketplaceProduct {
  id                       String                     @id @default(cuid())
  organizationId           String                     @map("organization_id")
  productName              String?
  productSku               String?
  quantity                 Int?
  description              String?
  shortDescription         String?
  listPrice                Decimal?                   @db.Decimal(15, 4)
  salePrice                Decimal?                   @db.Decimal(15, 4)
  barcode                  String?
  storeId                  String?
  marketPlaceAttributesId  String?
  marketPlaceCategoriesId  String?
  marketPlaceBrandsId      String?
  productId                String?
  parentProductId          String?
  productType              String?
  productUrl               String?
  isActive                 Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  images                   MarketplaceProductImage[]
  brand                    MarketplaceBrand?          @relation(fields: [marketPlaceBrandsId], references: [id])
  parentProduct            MarketplaceProduct?        @relation("ParentChildRelation", fields: [parentProductId], references: [id])
  childrenProducts         MarketplaceProduct[]       @relation("ParentChildRelation")
  store                    MerchantStore?             @relation(fields: [storeId], references: [id])
  attributes               MarketplaceAttribute[]     @relation("MarketplaceAttributesToMarketplaceProducts")
  categories               MarketplaceCategory[]      @relation("ProductsOnCategories")

  orderItems MarketplaceOrderItem[]

  @@unique([organizationId, barcode], map: "uniq_marketplace_product_barcode_per_org")
  @@unique([barcode])
  @@index([organizationId])
  @@index([organizationId, storeId])
  @@index([organizationId, isActive])
}

model ProductMatch {
  id               String   @id @default(cuid())
  organizationId   String   @map("organization_id")
  productCode      String?
  barcode          String?
  tempQuantity     Int?
  isTempQuantity   Boolean? @default(false)
  useCombinedStock Boolean? @default(false)
  sendStoreStock   Boolean? @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product StockCard? @relation(fields: [productCode], references: [productCode])
}

model SentRequests {
  id             String  @id @default(cuid())
  organizationId String  @map("organization_id")
  url            String
  storeId        String?
  body           String
  batchRequestId String?

  requestResponses RequestResponses[]
}

model RequestResponses {
  id                 String  @id @default(cuid())
  organizationId     String  @map("organization_id")
  sentRequestId      String?
  batchRequestResult String

  sentRequest SentRequests? @relation(fields: [sentRequestId], references: [id])
}

model PrintQueue {
  id            String    @id @default(cuid())
  organizationId String   @map("organization_id")
  productCode   String
  stockCard     StockCard @relation(fields: [productCode], references: [productCode])
  quantity      Int
  status        String    @default("PENDING")
  printedAt     DateTime?
  printedBy     String?
  // printedByUser removed - will be handled by userId reference to core-persistence
  printerName   String?
  errorMessage  String?
  retryCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([status])
}
